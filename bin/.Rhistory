}
}
}
## separa la columna id en "localidad, "Planta" y "Areola
df_esp_cen <- separate(df_esp_cen, id, c("Localidad", "Planta", "Areola"), sep = "_")
View(df_esp_cen)
## Guardar la base de datos en formato .cvs
write.csv(df_esp_cen, file = "../out/files/Espinas_centrales.csv")
## funcion para leer archivos .csv de espinas centrales
source("read_esp_rad.R")
## funcion para leer archivos .csv de espinas centrales
source("read_esp_cen.R")
## funcion para leer archivos .csv de espinas centrales
source("read_esp_rad.R")
## Este scrpt es para subir todos los archivos .csv de espinas centrales
library(tidyverse)
library(pander)
library(qqplotr)
library(ggpubr)
library(formattable)
## funcion para leer archivos .csv de espinas centrales
source("read_esp_cen.R")
## funcion para leer archivos .csv de espinas centrales
source("read_esp_rad.R")
## enlista en la variable "local" lo que hay en la carpeta Mesures
local <- list.files("../data/Mesures/")
## enlista los archivos de la carpeta "CC020" en la variable "planta"
planta <- list.files("../data/Mesures/CC020/")
## se crea el data frame vac?o para que no se sobreescriba
df_esp_cen <- data.frame()
## se utiliza el vector "local"  y asigna cada valor a la variable "i"
for (i in local) {
## se utiliza el vector "planta"  y asigna cada valor a la variable "j"
for (j in planta) {
## se enlistan todos los archivos csv de espinas centrales
lista_archivos <- list.files(paste0("../data/Mesures/", i, "/", j, "/centrales"))
## se utiliza el vector "lista_archivos"  y asigna cada valor a la variable "w"
for (w in lista_archivos) {
## se leen todos los archivos que est?n en el vector "lista_archivos"
df_1 <- read_esp_cen(paste0("../data/Mesures/", i, "/", j, "/centrales/", w))
## crea una columna llamada #pat"  para reconocer el patr?n del nombre de los archivos
pat <- data.frame(id = rep(stringr::str_extract(w, pattern = "CC0[0-9]+_P0[0-5]+_A[0-9]+"), times = nrow(df_1)))
## une la columna "pat" con df_1
df_1 <- cbind(pat, df_1)
## une los archivos por filas
df_esp_cen <- rbind(df_esp_cen, df_1)
}
}
}
## separa la columna id en "localidad, "Planta" y "Areola
df_esp_cen <- separate(df_esp_cen, id, c("Localidad", "Planta", "Areola"), sep = "_")
## Guardar la base de datos en formato .cvs
write.csv(df_esp_cen, file = "../out/files/Espinas_centrales.csv")
View(df_esp_cen)
## se crea el data frame vac?o para que no se sobreescriba
df_esp_rad <- data.frame()
## se utiliza el vector "local"  y asigna cada valor a la variable "i"
for (i in local) {
## enlista los archivos de la carpeta "CC020" en la variable "planta"
planta <- list.files(paste0("../data/Mesures/", i))
## se utiliza el vector "planta"  y asigna cada valor a la variable "j"
for (j in planta) {
## se enlistan todos los archivos csv de espinas centrales
lista_archivos <- list.files(paste0("../data/Mesures/", i, "/", j, "/radiales"))
## se utiliza el vector "lista_archivos"  y asigna cada valor a la variable "w"
for (w in lista_archivos) {
## se leen todos los archivos que est?n en el vector "lista_archivos"
df_1 <- read_esp_rad(paste0("../data/Mesures/", i, "/", j, "/radiales/", w))
## crea una columna llamada #pat"  para reconocer el patr?n del nombre de los archivos
pat <- data.frame(id = rep(stringr::str_extract(w, pattern = "CC0[0-9]+_P0[0-9]+_A[0-9]+"), times = nrow(df_1)))
## une la columna "pat" con df_1
df_1 <- cbind(pat, df_1)
## une los archivos por filas
df_esp_rad <- rbind(df_esp_rad, df_1)
}
}
}
## separa la columna id en "localidad, "Planta" y "Areola
df_esp_rad <- separate(df_esp_rad, id, c("Localidad", "Planta", "Areola"), sep = "_")
df_esp_cen <- data.frame()
## Este scrpt es para subir todos los archivos .csv de espinas centrales
library(tidyverse)
library(pander)
library(qqplotr)
library(ggpubr)
library(formattable)
## funcion para leer archivos .csv de espinas centrales
source("read_esp_cen.R")
## funcion para leer archivos .csv de espinas centrales
source("read_esp_rad.R")
## enlista en la variable "local" lo que hay en la carpeta Mesures
local <- list.files("../data/Mesures/")
df_esp_cen <- data.frame()
## se utiliza el vector "local"  y asigna cada valor a la variable "i"
for (i in local) {
## enlista los archivos de la carpeta "CC020" en la variable "planta"
planta <- list.files(paste0("../data/Mesures/", i))
## se utiliza el vector "planta"  y asigna cada valor a la variable "j"
for (j in planta) {
## se enlistan todos los archivos csv de espinas centrales
lista_archivos <- list.files(paste0("../data/Mesures/", i, "/", j, "/centrales"))
## se utiliza el vector "lista_archivos"  y asigna cada valor a la variable "w"
for (w in lista_archivos) {
## se leen todos los archivos que est?n en el vector "lista_archivos"
df_1 <- read_esp_rad(paste0("../data/Mesures/", i, "/", j, "/centrales/", w))
## crea una columna llamada #pat"  para reconocer el patr?n del nombre de los archivos
pat <- data.frame(id = rep(stringr::str_extract(w, pattern = "CC0[0-9]+_P0[0-9]+_A[0-9]+"), times = nrow(df_1)))
## une la columna "pat" con df_1
df_1 <- cbind(pat, df_1)
## une los archivos por filas
df_esp_cen <- rbind(df_esp_cen, df_1)
}
}
}
## Este scrpt es para subir todos los archivos .csv de espinas centrales
library(tidyverse)
library(pander)
library(qqplotr)
library(ggpubr)
library(formattable)
## funcion para leer archivos .csv de espinas centrales
source("read_esp_cen.R")
## funcion para leer archivos .csv de espinas centrales
source("read_esp_rad.R")
## enlista en la variable "local" lo que hay en la carpeta Mesures
local <- list.files("../data/Mesures/")
df_esp_cen <- data.frame()
## se utiliza el vector "local"  y asigna cada valor a la variable "i"
for (i in local) {
## enlista los archivos de la carpeta "CC020" en la variable "planta"
planta <- list.files(paste0("../data/Mesures/", i))
## se utiliza el vector "planta"  y asigna cada valor a la variable "j"
for (j in planta) {
## se enlistan todos los archivos csv de espinas centrales
lista_archivos <- list.files(paste0("../data/Mesures/", i, "/", j, "/centrales"))
## se utiliza el vector "lista_archivos"  y asigna cada valor a la variable "w"
for (w in lista_archivos) {
## se leen todos los archivos que est?n en el vector "lista_archivos"
df_1 <- read_esp_cen(paste0("../data/Mesures/", i, "/", j, "/centrales/", w))
## crea una columna llamada #pat"  para reconocer el patr?n del nombre de los archivos
pat <- data.frame(id = rep(stringr::str_extract(w, pattern = "CC0[0-9]+_P0[0-9]+_A[0-9]+"), times = nrow(df_1)))
## une la columna "pat" con df_1
df_1 <- cbind(pat, df_1)
## une los archivos por filas
df_esp_cen <- rbind(df_esp_cen, df_1)
}
}
}
View(df_esp_cen)
## separa la columna id en "localidad, "Planta" y "Areola
df_esp_cen <- separate(df_esp_cen, id, c("Localidad", "Planta", "Areola"), sep = "_")
## Guardar la base de datos en formato .cvs
write.csv(df_esp_cen, file = "../out/files/Espinas_centrales.csv")
View(df_esp_cen)
#### Espinas centrales #####
## se crea el data frame vacio para que no se sobreescriba
df_esp_rad <- data.frame()
## se utiliza el vector "local"  y asigna cada valor a la variable "i"
for (i in local) {
## enlista los archivos de la carpeta "CC020" en la variable "planta"
planta <- list.files(paste0("../data/Mesures/", i))
## se utiliza el vector "planta"  y asigna cada valor a la variable "j"
for (j in planta) {
## se enlistan todos los archivos csv de espinas centrales
lista_archivos <- list.files(paste0("../data/Mesures/", i, "/", j, "/radiales"))
## se utiliza el vector "lista_archivos"  y asigna cada valor a la variable "w"
for (w in lista_archivos) {
## se leen todos los archivos que est?n en el vector "lista_archivos"
df_1 <- read_esp_rad(paste0("../data/Mesures/", i, "/", j, "/radiales/", w))
## crea una columna llamada #pat"  para reconocer el patr?n del nombre de los archivos
pat <- data.frame(id = rep(stringr::str_extract(w, pattern = "CC0[0-9]+_P0[0-9]+_A[0-9]+"), times = nrow(df_1)))
## une la columna "pat" con df_1
df_1 <- cbind(pat, df_1)
## une los archivos por filas
df_esp_rad <- rbind(df_esp_rad, df_1)
}
}
}
## Guardar la base de datos en formato .cvs
write.csv(df_esp_rad, file = "../out/files/Espinas_radiales.csv")
library(tidyverse)
bd_esp_rad <- read.csv("../out/files/Espinas_radiales.csv")
head(bd_esp_rad)
## Este scrpt es para subir todos los archivos .csv de espinas centrales
library(tidyverse)
library(pander)
library(qqplotr)
library(ggpubr)
library(formattable)
## funcion para leer archivos .csv de espinas centrales
source("read_esp_cen.R")
## funcion para leer archivos .csv de espinas centrales
source("read_esp_rad.R")
## enlista en la variable "local" lo que hay en la carpeta Mesures
local <- list.files("../data/Mesures/")
#### Espinas centrales #####
## se crea el data frame vacio para que no se sobreescriba
df_esp_cen <- data.frame()
## se utiliza el vector "local"  y asigna cada valor a la variable "i"
for (i in local) {
## enlista los archivos de la carpeta "CC020" en la variable "planta"
planta <- list.files(paste0("../data/Mesures/", i))
## se utiliza el vector "planta"  y asigna cada valor a la variable "j"
for (j in planta) {
## se enlistan todos los archivos csv de espinas centrales
lista_archivos <- list.files(paste0("../data/Mesures/", i, "/", j, "/centrales"))
## se utiliza el vector "lista_archivos"  y asigna cada valor a la variable "w"
for (w in lista_archivos) {
## se leen todos los archivos que est?n en el vector "lista_archivos"
df_1 <- read_esp_cen(paste0("../data/Mesures/", i, "/", j, "/centrales/", w))
## crea una columna llamada #pat"  para reconocer el patr?n del nombre de los archivos
pat <- data.frame(id = rep(stringr::str_extract(w, pattern = "CC0[0-9]+_P0[0-9]+_A[0-9]+"), times = nrow(df_1)))
## une la columna "pat" con df_1
df_1 <- cbind(pat, df_1)
## une los archivos por filas
df_esp_cen <- rbind(df_esp_cen, df_1)
}
}
}
## separa la columna id en "localidad, "Planta" y "Areola
df_esp_cen <- separate(df_esp_cen, id, c("Localidad", "Planta", "Areola"), sep = "_")
View(df_esp_cen)
## Guardar la base de datos en formato .cvs
write.csv(df_esp_cen, file = "../out/files/Espinas_centrales.csv", row.names = FALSE)
#### Espinas centrales #####
## se crea el data frame vacio para que no se sobreescriba
df_esp_rad <- data.frame()
## se utiliza el vector "local"  y asigna cada valor a la variable "i"
for (i in local) {
## enlista los archivos de la carpeta "CC020" en la variable "planta"
planta <- list.files(paste0("../data/Mesures/", i))
## se utiliza el vector "planta"  y asigna cada valor a la variable "j"
for (j in planta) {
## se enlistan todos los archivos csv de espinas centrales
lista_archivos <- list.files(paste0("../data/Mesures/", i, "/", j, "/radiales"))
## se utiliza el vector "lista_archivos"  y asigna cada valor a la variable "w"
for (w in lista_archivos) {
## se leen todos los archivos que est?n en el vector "lista_archivos"
df_1 <- read_esp_rad(paste0("../data/Mesures/", i, "/", j, "/radiales/", w))
## crea una columna llamada #pat"  para reconocer el patr?n del nombre de los archivos
pat <- data.frame(id = rep(stringr::str_extract(w, pattern = "CC0[0-9]+_P0[0-9]+_A[0-9]+"), times = nrow(df_1)))
## une la columna "pat" con df_1
df_1 <- cbind(pat, df_1)
## une los archivos por filas
df_esp_rad <- rbind(df_esp_rad, df_1)
}
}
}
## separa la columna id en "localidad, "Planta" y "Areola
df_esp_rad <- separate(df_esp_rad, id, c("Localidad", "Planta", "Areola"), sep = "_")
View(df_esp_rad)
## Guardar la base de datos en formato .cvs
write.csv(df_esp_rad, file = "../out/files/Espinas_radiales.csv", row.names = FALSE)
bd_esp_rad <- read.csv("../out/files/Espinas_radiales.csv")
View(bd_esp_rad)
bd_esp_rad %>%
ggplot(aes(x = X_1, y = Y_1)) +
geom_point() +
xlim(-0.7, 0.7) + ylim(-0.7, 0.7) +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
coord_fixed(ratio = 1) +
stat_ellipse(level = 0.65, geom = "polygon", fill = "cyan", alpha = 0.5)
p_esp_R <- bd_esp_rad %>%
ggplot(aes(x = X_1, y = Y_1)) +
geom_point() +
xlim(-1.5, 1.5) + ylim(-1.5, 1.5) +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
coord_fixed(ratio = 1) +
stat_ellipse(level = 0.65, geom = "polygon", fill = "cyan", alpha = 0.5)
bd_esp_rad %>%
ggplot(aes(x = X_1, y = Y_1)) +
geom_point() +
xlim(-1.5, 1.5) + ylim(-1.5, 1.5) +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
coord_fixed(ratio = 1) +
stat_ellipse(level = 0.65, geom = "polygon", fill = "cyan", alpha = 0.5)
bd_esp_rad %>%
ggplot(aes(x = X_1, y = Y_1)) +
geom_point() +
xlim(-1.3, 1.3) + ylim(-1.3, 1.3) +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
coord_fixed(ratio = 1) +
stat_ellipse(level = 0.65, geom = "polygon", fill = "cyan", alpha = 0.5)
bd_esp_rad %>%
ggplot(aes(x = X_1, y = Y_1)) +
geom_point() +
xlim(-1.1, 1.1) + ylim(-1.1, 1.1) +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
coord_fixed(ratio = 1) +
stat_ellipse(level = 0.65, geom = "polygon", fill = "cyan", alpha = 0.5)
p_esp_R <- bd_esp_rad %>%
ggplot(aes(x = X_1, y = Y_1)) +
geom_point() +
xlim(-1.2, 1.2) + ylim(-1.2, 1.2) +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
coord_fixed(ratio = 1) +
stat_ellipse(level = 0.65, geom = "polygon", fill = "cyan", alpha = 0.5)
bd_esp_rad %>%
ggplot(aes(x = X_1, y = Y_1)) +
geom_point() +
xlim(-1.2, 1.2) + ylim(-1.2, 1.2) +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
coord_fixed(ratio = 1) +
stat_ellipse(level = 0.65, geom = "polygon", fill = "cyan", alpha = 0.5)
bd_esp_rad %>%
ggplot(aes(x = X_1, y = Y_1)) +
geom_point() +
xlim(-1.5, 1.5) + ylim(-1.5, 1.5) +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
coord_fixed(ratio = 1) +
stat_ellipse(level = 0.65, geom = "polygon", fill = "cyan", alpha = 0.5)
bd_esp_rad %>%
ggplot(aes(x = X_1, y = Y_1)) +
geom_point() +
xlim(-1.4, 1.4) + ylim(-1.4, 1.4) +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
coord_fixed(ratio = 1) +
stat_ellipse(level = 0.65, geom = "polygon", fill = "cyan", alpha = 0.5)
head(bd_esp_rad)
bd_esp_rad %>%
filter(Localidad == "CC020", Planta == "P01", Areola == "A01")
ggplot(aes(x = X_1, y = Y_1)) +
geom_point() +
xlim(-1.4, 1.4) + ylim(-1.4, 1.4) +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
coord_fixed(ratio = 1) +
stat_ellipse(level = 0.65, geom = "polygon", fill = "cyan", alpha = 0.5)
bd_esp_rad %>%
filter(Localidad == "CC020", Planta == "P01", Areola == "A01") %>%
ggplot(aes(x = X_1, y = Y_1)) +
geom_point() +
xlim(-1.4, 1.4) + ylim(-1.4, 1.4) +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
coord_fixed(ratio = 1) +
stat_ellipse(level = 0.65, geom = "polygon", fill = "cyan", alpha = 0.5)
esp_rad_are <- bd_esp_rad %>%
filter(Localidad == "CC020", Planta == "P01", Areola == "A01") %>%
p_esp_R <-
ggplot(aes(x = X_1, y = Y_1)) +
geom_point() +
xlim(-1.4, 1.4) + ylim(-1.4, 1.4) +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
coord_fixed(ratio = 1) +
stat_ellipse(level = 0.65, geom = "polygon", fill = "cyan", alpha = 0.5)
esp_rad_are <- bd_esp_rad %>%
filter(Localidad == "CC020", Planta == "P01", Areola == "A01")
esp_rad_are %>%
ggplot(aes(x = X_1, y = Y_1)) +
geom_point() +
xlim(-1.4, 1.4) + ylim(-1.4, 1.4) +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
coord_fixed(ratio = 1) +
stat_ellipse(level = 0.65, geom = "polygon", fill = "cyan", alpha = 0.5)
esp_rad_are %>%
ggplot(aes(x = X_1, y = Y_1)) +
geom_point() +
xlim(-1.4, 1.4) + ylim(-1.4, 1.4) +
geom_vline(xintercept = 0) +
geom_hline(yintercept = 0) +
coord_fixed(ratio = 1) +
stat_ellipse(level = 0.65, geom = "polygon", fill = "cyan", alpha = 0.5)
esp_rad_are %>%
ggplot(aes(x = X_1, y = Y_1)) +
geom_point() +
stat_ellipse(level = 0.65, geom = "polygon", fill = "cyan", alpha = 0.5)
p_esp_R <- esp_rad_are %>%
ggplot(aes(x = X_1, y = Y_1)) +
geom_point() +
stat_ellipse(level = 0.65, fill = "cyan", alpha = 0.5)
esp_rad_are %>%
ggplot(aes(x = X_1, y = Y_1)) +
geom_point() +
stat_ellipse(level = 0.65, fill = "cyan", alpha = 0.5)
esp_rad_are %>%
ggplot(aes(x = X_1, y = Y_1)) +
geom_point() +
stat_ellipse(level = 0.65)
library(cluster)
pb <- ggplot_build(p_esp_R)
el <- pb$data[[4]][c("x","y")]
pb
el <- pb$data[[2]][c("x","y")]
el_mat <- as.matrix(el)
exy <- predict(ellipsoidhull(el_mat))
me <- colMeans((exy))
dist2center <- sqrt(rowSums((t(t(exy)-me))^2))
max_dis <- max(dist2center)     ## major axis
min_dis <- min(dist2center)   ## minor axis
exy <- data.frame(cbind(exy, dist2center))
colnames(exy)[1:2] <- c("x", "y")
exy_X_1 <- exy %>%
filter(dist2center == max_dis) %>%
select(x, y) %>%
distinct() %>%
rownames_to_column() %>%
filter(rowname == 1) %>%
select(-rowname) %>%
rename(X_1 = x, Y_1 = y)
exy_X_2 <- exy %>%
filter(dist2center == max_dis) %>%
select(x, y) %>%
distinct() %>%
rownames_to_column() %>%
filter(rowname == 2) %>%
select(-rowname) %>%
rename(X_2 = x, Y_2 = y)
X_line <- cbind(exy_X_1, exy_X_2)
exy_Y_1 <- exy %>%
filter(dist2center == min_dis) %>%
select(x, y) %>%
distinct() %>%
rownames_to_column() %>%
filter(rowname == 1) %>%
select(-rowname) %>%
rename(X_1 = x, Y_1 = y)
exy_Y_2 <- exy %>%
filter(dist2center == min_dis) %>%
select(x, y) %>%
distinct() %>%
rownames_to_column() %>%
filter(rowname == 2) %>%
select(-rowname) %>%
rename(X_2 = x, Y_2 = y)
Y_line <- cbind(exy_Y_1, exy_Y_2)
esp_rad_are %>%
ggplot(aes(x = X_1, y = Y_1)) +
geom_point() +
geom_segment(X_line, mapping=aes(x=X_1, y=Y_1, xend=X_2, yend=Y_2)) +
geom_segment(Y_line, mapping=aes(x=X_1, y=Y_1, xend=X_2, yend=Y_2)) +
xlim(-0.7, 0.7) + ylim(-0.7, 0.7) +
coord_fixed(ratio = 1)
library(dplyr)
library(NISTunits)
library(REdaS)
## enlista en la variable "local" lo que hay en la carpeta Mesures
local <- list.files("../data/Mesures/")
#### Espinas radiales #####
## se crea el data frame vacio para que no se sobreescriba
df_esp_rad <- data.frame()
## se utiliza el vector "local"  y asigna cada valor a la variable "i"
for (i in local) {
## enlista los archivos de la carpeta "CC020" en la variable "planta"
planta <- list.files(paste0("../data/Mesures/", i))
## se utiliza el vector "planta"  y asigna cada valor a la variable "j"
for (j in planta) {
## se enlistan todos los archivos csv de espinas centrales
lista_archivos <- list.files(paste0("../data/Mesures/", i, "/", j, "/radiales"))
## se utiliza el vector "lista_archivos"  y asigna cada valor a la variable "w"
for (w in lista_archivos) {
## se leen todos los archivos que est?n en el vector "lista_archivos"
df_1 <- read_esp_rad(paste0("../data/Mesures/", i, "/", j, "/radiales/", w))
## crea una columna llamada #pat"  para reconocer el patr?n del nombre de los archivos
pat <- data.frame(id = rep(stringr::str_extract(w, pattern = "CC0[0-9]+_P0[0-9]+_A[0-9]+"), times = nrow(df_1)))
## une la columna "pat" con df_1
df_1 <- cbind(pat, df_1)
## une los archivos por filas
df_esp_rad <- rbind(df_esp_rad, df_1)
}
}
}
source("read_esp_cen.R")
## funcion para leer archivos .csv de espinas centrales
source("read_esp_rad.R")
#### Espinas radiales #####
## se crea el data frame vacio para que no se sobreescriba
df_esp_rad <- data.frame()
## se utiliza el vector "local"  y asigna cada valor a la variable "i"
for (i in local) {
## enlista los archivos de la carpeta "CC020" en la variable "planta"
planta <- list.files(paste0("../data/Mesures/", i))
## se utiliza el vector "planta"  y asigna cada valor a la variable "j"
for (j in planta) {
## se enlistan todos los archivos csv de espinas centrales
lista_archivos <- list.files(paste0("../data/Mesures/", i, "/", j, "/radiales"))
## se utiliza el vector "lista_archivos"  y asigna cada valor a la variable "w"
for (w in lista_archivos) {
## se leen todos los archivos que est?n en el vector "lista_archivos"
df_1 <- read_esp_rad(paste0("../data/Mesures/", i, "/", j, "/radiales/", w))
## crea una columna llamada #pat"  para reconocer el patr?n del nombre de los archivos
pat <- data.frame(id = rep(stringr::str_extract(w, pattern = "CC0[0-9]+_P0[0-9]+_A[0-9]+"), times = nrow(df_1)))
## une la columna "pat" con df_1
df_1 <- cbind(pat, df_1)
## une los archivos por filas
df_esp_rad <- rbind(df_esp_rad, df_1)
}
}
}
View(df_esp_rad)
?NISTunits
version
version(NISTunits)
packageVersion(NISTunits)
library(NISTunits)
library(NISTunits)
packageVersion(NISTunits)
packageVersion("NISTunits")
packageVersion("dplyr")
packageVersion("ggplot2")
?NISTunits
